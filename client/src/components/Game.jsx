import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { useGame } from '../contexts/GameContext';
import ShipPlacement from './ShipPlacement';
import GameHeader from './game/GameHeader';
import GameBoard from './game/GameBoard';
import GameErrorBanners from './game/GameErrorBanners';
import GameStatusBanners from './game/GameStatusBanners';
import { BackToLobbyIcon, StatusIcon, ErrorIcon } from './game/GameIcons';
import './Game.css';

const Game = () => {
    const { gameId } = useParams();
    const navigate = useNavigate();
    const { user } = useAuth();
    const {
        currentGame,
        isMyTurn,
        setReady,
        makeShot,
        getGameState,
        leaveGame,
        submitBoardPlacement,
        error: gameContextError,
        clearError: clearGameContextError
    } = useGame();

    const [localError, setLocalError] = useState(null);

    const playerIsCreator = currentGame?.creatorName === user?.username;
    const playerIsJoiner = currentGame?.joinerName === user?.username;

    const myBoardData = playerIsCreator ? currentGame?.creatorBoard : currentGame?.joinerBoard;
    const opponentBoardData = playerIsCreator ? currentGame?.joinerBoard : currentGame?.creatorBoard;

    const showPlacementUI = currentGame && user && (
        (playerIsCreator && !currentGame.creatorBoardSet) ||
        (playerIsJoiner && !currentGame.joinerBoardSet)
    );

    const isGameInProgress = currentGame?.state === 2;
    const isGameFinished = currentGame?.state === 3;

    useEffect(() => {
        if (!user) {
            navigate('/login');
            return;
        }
        if (!gameId) {
            navigate('/');
            return;
        }

        const fetchGameState = async () => {
            try {
                setLocalError(null);
                if (typeof clearGameContextError === 'function') {
                    clearGameContextError();
                } else {
                    console.warn('clearGameContextError is not a function during fetchGameState initial call');
                }
                await getGameState(gameId, user.username);
            } catch (err) {
                console.error('Error fetching game state:', err);
                setLocalError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã: ' + (err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
        };

        fetchGameState();
    }, [gameId, user, getGameState, navigate, clearGameContextError]);

    const handlePlacementConfirmed = async (placedBoard) => {
        if (!gameId || !user?.username) {
            setLocalError('–û—à–∏–±–∫–∞: ID –∏–≥—Ä—ã –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏.');
            return;
        }
        try {
            setLocalError(null);
            if (typeof clearGameContextError === 'function') {
                clearGameContextError();
            }
            const success = await submitBoardPlacement(gameId, user.username, placedBoard);
            if (success) {
                console.log('–†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã...');
            } else {
                if (!gameContextError) {
                    setLocalError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                }
            }
        } catch (err) {
            console.error('Error confirming placement:', err);
            setLocalError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏: ' + (err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
        }
    };

    const handleReadyClick = async () => {
        try {
            setLocalError(null);
            if (typeof clearGameContextError === 'function') {
                clearGameContextError();
            }
            await setReady(gameId, user.username);
        } catch (err) {
            console.error('Error setting ready:', err);
            setLocalError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: ' + (err.message || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å'));
        }
    };

    const handleCellClick = async (row, col) => {
        if (!isMyTurn || isGameFinished || !isGameInProgress) return;
        try {
            setLocalError(null);
            if (typeof clearGameContextError === 'function') {
                clearGameContextError();
            }
            const position = { row, col };
            await makeShot(gameId, user.username, position);
        } catch (err) {
            console.error('Error making shot:', err);
            if (!gameContextError) {
                setLocalError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã—Å—Ç—Ä–µ–ª–∞: ' + (err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
        }
    };

    const handleReturnToLobby = () => {
        leaveGame();
        navigate('/home');
    };

    if (!user || !gameId) {
        return <div className="page-loading-container"><div className="loading-spinner"></div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }

    if (showPlacementUI) {
        return (
            <div className="game-page-container ship-placement-active">
                <ShipPlacement
                    gameId={gameId}
                    playerName={user.username}
                    onPlacementConfirmed={handlePlacementConfirmed}
                />
            </div>
        );
    }

    if (!currentGame && localError) {
        return (
            <div className="game-page-container error-page">
                <div className="game-error-banner card">
                    <h3><ErrorIcon /> –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã</h3>
                    <p>{localError}</p>
                    <button onClick={handleReturnToLobby} className="lobby-button secondary-button">
                        <BackToLobbyIcon /> –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
                    </button>
                </div>
            </div>
        );
    }

    if (!currentGame && !isGameFinished) {
        return <div className="page-loading-container"><div className="loading-spinner"></div>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã...</div>;
    }

    if (!currentGame) {
        return (
            <div className="game-page-container error-page">
                <div className="game-error-banner card">
                    <h3><ErrorIcon /> –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</h3>
                    <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.</p>
                    <button onClick={handleReturnToLobby} className="lobby-button secondary-button">
                        <BackToLobbyIcon /> –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
                    </button>
                </div>
            </div>
        );
    }

    if (isGameFinished) {
        return (
            <div className="game-finished-overlay">
                <div className="modal-content card">
                    <h2><StatusIcon /> –ò–≥—Ä–∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
                    <p className={`game-result-message ${currentGame.winner === user.username ? 'winner' : 'loser'}`}>
                        {currentGame.winner === user.username ? 'üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ' : 'üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. üòî'}
                    </p>
                    <p>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <strong>{currentGame.winner || "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}</strong></p>
                    <button onClick={handleReturnToLobby} className="lobby-button primary-button">
                        <BackToLobbyIcon /> –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="game-page-container">
            <GameHeader
                gameId={gameId}
                user={user}
                currentGame={currentGame}
                playerIsCreator={playerIsCreator}
                isGameInProgress={isGameInProgress}
                isMyTurn={isMyTurn}
            />

            <GameErrorBanners
                localError={localError}
                gameContextError={gameContextError}
                setLocalError={setLocalError}
                clearGameContextError={clearGameContextError}
            />

            <GameStatusBanners
                currentGame={currentGame}
                playerIsCreator={playerIsCreator}
                playerIsJoiner={playerIsJoiner}
                handleReadyClick={handleReadyClick}
            />

            {(!showPlacementUI && !isGameFinished && currentGame.state !== 0 && !(currentGame.state === 1 && !(currentGame.creatorBoardSet && currentGame.joinerBoardSet))) && (
                <div className="game-boards-container">
                    <div className="board-section my-board-section">
                        <h2>–í–∞—à–µ –ø–æ–ª–µ ({user?.username})</h2>
                        <GameBoard
                            isMyBoard={true}
                            boardData={myBoardData}
                            currentGame={currentGame}
                            user={user}
                            playerIsCreator={playerIsCreator}
                            isGameInProgress={isGameInProgress}
                            isGameFinished={isGameFinished}
                            isMyTurn={isMyTurn}
                            handleCellClick={handleCellClick}
                        />
                    </div>
                    <div className="board-section opponent-board-section">
                        <h2>–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ ({playerIsCreator ? (currentGame.joinerName || '–û–∂–∏–¥–∞–Ω–∏–µ...') : (currentGame.creatorName || '–û–∂–∏–¥–∞–Ω–∏–µ...')})</h2>
                        <GameBoard
                            isMyBoard={false}
                            boardData={opponentBoardData}
                            currentGame={currentGame}
                            user={user}
                            playerIsCreator={playerIsCreator}
                            isGameInProgress={isGameInProgress}
                            isGameFinished={isGameFinished}
                            isMyTurn={isMyTurn}
                            handleCellClick={handleCellClick}
                        />
                    </div>
                </div>
            )}

            <div className="game-footer">
                <button onClick={handleReturnToLobby} className="lobby-button secondary-button">
                    <BackToLobbyIcon /> –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ª–æ–±–±–∏
                </button>
            </div>
        </div>
    );
};

export default Game;